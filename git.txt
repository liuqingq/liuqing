Git相关简介：
   Git是目前世界上最先进的分布式版本控制系统；
1、创建一个空目录：
mkdir learngit
cd learngit
pwd
2、通过Git init命令把这个目录变成Git可以管理的仓库
Git init
此时就创建好了一个仓库，并且是一个空仓库

把一个文件放入Git仓库：
1、使用Git add告诉Git，把文件添加到仓库
Git add readme.txt
2、使用Git commit告诉Git，把文件提交到仓库
git commit -m "wrote a readme file"
-m 后面输入的是本次提交的说明

Git status命令可以让我们时刻掌握仓库的当前状态
Git diff 文件名：可以使我们知道我们具体对该文件进行了什么修改

提交修改和提交文件是相同的步骤：
1、git add 文件名
2、在此处我们可以使用Git status命令，该命令告诉我们将要提交修改的文件
3、git commit
提交完成后我们仍然可以使用Git status命令，他会告诉我们当前没有要提交的修改，且工作目录干净

小结：要随时掌握工作区的状态，使用Git status命令
如果Git status告诉我们有文件修改过，用Git diff可以查看修改的内容

git log命令可以告诉我们修改的历史记录，即显示从最近到最远的提交日志【如果觉得输出信息太多，可以尝试加上--pretty=oneline参数】

版本回退：
查看当前版本可以使用head命令
查看上一个版本使用head^
查看上上个head^^
往上N个版本head~N
回退到某一个版本：git reset --hard commit_id
查看是否会退到上一个版本：cat 文件名【假如有三个版本，当我们处于第三个版本回退到第二个版本时，使用Git log命令会发现第三个版本已经不见了，但是也可以回去；前提是窗口未关闭，向上找找到第三个版本的版本号使用Git reset --hard 版本号，于是就可以回到那个版本啦。但是如果你的窗口关闭了但是你还想回退到第三个版本也是可以的，使用Git reflog命令，该命令记录你每次的命令】

工作区：
工作区中有一个隐藏的目录.git，这个不是工作区而是Git的版本库【详细的信息可以查看图片】
前面讲了我们把文件放入Git中，
Git add实际上就是把文件修改添加到暂存区
Git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

Git比其他版本控制系统设计的优秀是因为Git耿总并管理的是修改

Git checkout -- file 可以丢弃工作取得修改【改名的意思就是把file文件在工作取得修改全部注销，此处存在两种情况：
1、文件被修改后还没有放到暂存区，现在撤销就回到和版本库一模一样的状态
2、文件被修改后已经添加到暂存区，又做了修改，现在，撤销就该回到和添加到暂存区后的状态
同时我们也可以使用git resset head file命令把暂存区的修改撤销掉，重新放回工作区

删除文件：
可以直接在文件管理器中把没用的文件删除，也可以使用命令：rm 文件名
如果要使用命令将文件从版本库中删除
1、rm 文件名
2、Git commit
如果删错了：使用rm命令后版本库中还有；可以使用git checkout -- 文件名 把删除的文件恢复到最新版本

远程仓库：
第一步：创建SSH Key
ssh-keygen -t ras -C "1144287758@qq.com" 
然后一路回车直到目录下有一个.ssh的文件夹且里面有两个文件id_rsa;id_rsa.pub；其中id_rsa是私钥，id_rsa.pub是公钥
第二步：登录GitHub，创建一个库，点击“Add SSH Key”,填上任意的title，在KEY文本框里粘贴id_ras.pub文件的内容

在GitHub创建一个仓库，使本地仓库与之进行远程同步：
1、登录GitHub，在右上角找到“creat a new repo”创建一个新的仓库，在“repository name”填入learnGit，其他保持默认设置点击“create repository”
2、在本地的learngit仓库下运行命令
git remote add origin git@github.com:liuqingq/learngit.git
添加后远程仓库名就是origin
3、把本地库上的所有内容推送到远程库上
git push -u origin master
把本地库的内容推送到远程，用Git push命令，实际上就是把当前分支master推送到远程

克隆：
1、登录GitHub，创建一个新的仓库
2、使用命令git clone克隆一个本地仓库

分支的合并：
1、创建Dev分支，切换到Dev
Git checkout -b dev
git checkout 命令加上-d参数表示创建并且切换，相当于以下的两条命令：git branch dev 
                 git checkout dev
2、使用git branch命令查看当前分支
git branch
3、对readme.txt进行更改后提交
git add readme.txt
git commit -m "branch test"
现在Dev分支的工作完成，切回到master分支
git checkout master
4、把Dev的工作成果合并到master
git merge dev
git merge命令用于合并指定分支到当前分支
5、删除Dev 分支
git branch -d dev
小结：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并分支：git merge <name>
删除分支：git branch -d <name>

解决冲突：
使用git log --graph命令可以看到分之合并图

修复bug：
修复bug时，通常会创建新的bug分支进行修复，然后合并后删除
当手头的工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再用git stash pop 回到工作现场

多人协作的工作模式：
1、首先，可以试图用git push origin branch-name推送自己的修改
2、如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并
3、如果合并有冲突则解决冲突，并自本地提交
4、没有冲突或者解决冲突后，再用git push origin branch-name就能推送成功了
小结：
1、查看远程库的信息：git remote  -v
2、在本地创建和远程分支对应的分支，使用git checkout -bbranch-name origin/branch-name,本地和远程分支得名字最好一致
3、建立本地分支与远程分支的关联：git branch --set-upstream branch-name origin/branch-name